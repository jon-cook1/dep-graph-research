{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\nimport ace from 'ace-builds';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  nodes: initialNodes,\n  edges: initialEdges,\n  order,\n  editorRef,\n  activeTab,\n  noColor\n}, ref) => {\n  _s();\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const {\n    fitView\n  } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  const activeTabRef = useRef(activeTab); // Ref to track the latest activeTab\n  const noColorRef = useRef(noColor); // Ref to track the latest noColor state\n  const [coloringStarted, setColoringStarted] = useState(false);\n  const markerIdsRef = useRef([]);\n  const colorClassesRef = useRef(new Map());\n  const savedHighlightsRef = useRef([]); // Store cumulative original highlights\n  const savedDecompHighlightsRef = useRef([]); // Store cumulative decomposed highlights\n\n  const createColorClass = color => {\n    if (!colorClassesRef.current.has(color)) {\n      const className = `highlight-${color.replace('#', '')}`;\n      const style = document.createElement('style');\n      style.innerHTML = `\n          .${className} {\n            position: absolute;\n            background: ${color}40;\n            z-index: 20;\n          }\n        `;\n      document.head.appendChild(style);\n      colorClassesRef.current.set(color, className);\n    }\n    return colorClassesRef.current.get(color);\n  };\n  const clearHighlights = useCallback(() => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current.forEach(markerId => session.removeMarker(markerId));\n      markerIdsRef.current = [];\n    }\n  }, [editorRef]);\n  const applyHighlightsForTab = useCallback(currentTab => {\n    // Use latest noColorRef state\n    if (noColorRef.current) {\n      clearHighlights();\n      return;\n    }\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current.forEach(markerId => session.removeMarker(markerId));\n      markerIdsRef.current = [];\n      const highlights = currentTab === 'Original' ? savedHighlightsRef.current : savedDecompHighlightsRef.current;\n      highlights.forEach(({\n        lineNumbers,\n        color\n      }) => {\n        const colorClass = createColorClass(color);\n        lineNumbers.forEach(line => {\n          const Range = ace.require('ace/range').Range;\n          const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n          markerIdsRef.current.push(markerId);\n        });\n      });\n    }\n  }, [editorRef, clearHighlights]);\n  useEffect(() => {\n    if (initialNodes.length && initialEdges.length) {\n      const {\n        styledNodes,\n        styledEdges\n      } = applyStyles(initialNodes, initialEdges);\n      setNodesState(styledNodes);\n      setEdgesState(styledEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n    savedHighlightsRef.current = [];\n    savedDecompHighlightsRef.current = [];\n    let delay = 500; // Initial delay before the first node is colored\n\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(setTimeout(() => {\n        setNodesState(nds => nds.map(node => {\n          if (node.id === id) {\n            if (node.code_lines) {\n              savedHighlightsRef.current.push({\n                lineNumbers: node.code_lines,\n                color\n              });\n            }\n            if (node.decomp_code_lines) {\n              savedDecompHighlightsRef.current.push({\n                lineNumbers: node.decomp_code_lines,\n                color\n              });\n            }\n\n            // Apply highlights based on the latest noColorRef state\n            if (!noColorRef.current) {\n              applyHighlightsForTab(activeTabRef.current);\n            } else {\n              clearHighlights(); // Clear highlights if noColor is toggled during animation\n            }\n            return {\n              ...node,\n              style: {\n                ...node.style,\n                background: color\n              }\n            };\n          }\n          return node;\n        }));\n        setEdgesState(eds => eds.map(edge => {\n          if (edge.id === id) {\n            return {\n              ...edge,\n              animated: true,\n              style: {\n                ...edge.style,\n                stroke: color,\n                strokeWidth: 6\n              }\n            };\n          }\n          return edge;\n        }));\n      }, delay));\n      delay += 500; // Increment delay for each subsequent node\n    });\n  }, [order, setNodesState, setEdgesState, applyHighlightsForTab, clearHighlights]);\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      setNodesState(nds => nds.map(node => ({\n        ...node,\n        style: {\n          ...node.style,\n          background: '#D3D3D3'\n        }\n      })));\n      setEdgesState(eds => eds.map(edge => ({\n        ...edge,\n        style: {\n          ...edge.style,\n          stroke: '#D3D3D3'\n        }\n      })));\n      setColoringStarted(false);\n      clearHighlights();\n    }\n  }));\n  useEffect(() => {\n    activeTabRef.current = activeTab;\n    applyHighlightsForTab(activeTab);\n  }, [activeTab, applyHighlightsForTab]);\n  useEffect(() => {\n    if (nodes.length && edges.length && !coloringStarted) {\n      runColorAnimation();\n      setColoringStarted(true);\n    }\n  }, [nodes, edges, runColorAnimation, coloringStarted]);\n\n  // Update noColorRef whenever noColor changes\n  useEffect(() => {\n    noColorRef.current = noColor;\n    if (noColor) {\n      clearHighlights();\n    } else {\n      applyHighlightsForTab(activeTab);\n    }\n  }, [noColor, applyHighlightsForTab, clearHighlights, activeTab]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-display\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 7\n  }, this);\n}, \"MDMK7cPDDdQs6uSRmzZnbcmc5wo=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n})), \"MDMK7cPDDdQs6uSRmzZnbcmc5wo=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c2 = GraphDisplay;\nexport default GraphDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphDisplay$forwardRef\");\n$RefreshReg$(_c2, \"GraphDisplay\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","useState","forwardRef","useImperativeHandle","ReactFlow","useNodesState","useEdgesState","useReactFlow","applyStyles","ace","jsxDEV","_jsxDEV","GraphDisplay","_s","_c","nodes","initialNodes","edges","initialEdges","order","editorRef","activeTab","noColor","ref","setNodesState","onNodesChange","setEdgesState","onEdgesChange","fitView","animationTimeoutRef","activeTabRef","noColorRef","coloringStarted","setColoringStarted","markerIdsRef","colorClassesRef","Map","savedHighlightsRef","savedDecompHighlightsRef","createColorClass","color","current","has","className","replace","style","document","createElement","innerHTML","head","appendChild","set","get","clearHighlights","editor","session","getSession","forEach","markerId","removeMarker","applyHighlightsForTab","currentTab","highlights","lineNumbers","colorClass","line","Range","require","addMarker","push","length","styledNodes","styledEdges","runColorAnimation","clearTimeout","delay","id","setTimeout","nds","map","node","code_lines","decomp_code_lines","background","eds","edge","animated","stroke","strokeWidth","resetGraphColors","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js"],"sourcesContent":["import React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\nimport ace from 'ace-builds';\n\nconst GraphDisplay = forwardRef(\n  ({ nodes: initialNodes, edges: initialEdges, order, editorRef, activeTab, noColor }, ref) => {\n    const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n    const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n    const { fitView } = useReactFlow();\n    const animationTimeoutRef = useRef([]);\n    const activeTabRef = useRef(activeTab); // Ref to track the latest activeTab\n    const noColorRef = useRef(noColor); // Ref to track the latest noColor state\n    const [coloringStarted, setColoringStarted] = useState(false);\n    const markerIdsRef = useRef([]);\n    const colorClassesRef = useRef(new Map());\n    const savedHighlightsRef = useRef([]); // Store cumulative original highlights\n    const savedDecompHighlightsRef = useRef([]); // Store cumulative decomposed highlights\n\n    const createColorClass = (color) => {\n      if (!colorClassesRef.current.has(color)) {\n        const className = `highlight-${color.replace('#', '')}`;\n        const style = document.createElement('style');\n        style.innerHTML = `\n          .${className} {\n            position: absolute;\n            background: ${color}40;\n            z-index: 20;\n          }\n        `;\n        document.head.appendChild(style);\n        colorClassesRef.current.set(color, className);\n      }\n      return colorClassesRef.current.get(color);\n    };\n\n    const clearHighlights = useCallback(() => {\n      if (editorRef.current && editorRef.current.editor) {\n        const session = editorRef.current.editor.getSession();\n        markerIdsRef.current.forEach((markerId) => session.removeMarker(markerId));\n        markerIdsRef.current = [];\n      }\n    }, [editorRef]);\n\n    const applyHighlightsForTab = useCallback(\n      (currentTab) => {\n        // Use latest noColorRef state\n        if (noColorRef.current) {\n          clearHighlights();\n          return;\n        }\n\n        if (editorRef.current && editorRef.current.editor) {\n          const session = editorRef.current.editor.getSession();\n          markerIdsRef.current.forEach((markerId) => session.removeMarker(markerId));\n          markerIdsRef.current = [];\n\n          const highlights = currentTab === 'Original' ? savedHighlightsRef.current : savedDecompHighlightsRef.current;\n\n          highlights.forEach(({ lineNumbers, color }) => {\n            const colorClass = createColorClass(color);\n            lineNumbers.forEach((line) => {\n              const Range = ace.require('ace/range').Range;\n              const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n              markerIdsRef.current.push(markerId);\n            });\n          });\n        }\n      },\n      [editorRef, clearHighlights]\n    );\n\n    useEffect(() => {\n      if (initialNodes.length && initialEdges.length) {\n        const { styledNodes, styledEdges } = applyStyles(initialNodes, initialEdges);\n        setNodesState(styledNodes);\n        setEdgesState(styledEdges);\n        fitView();\n      }\n    }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n\n    const runColorAnimation = useCallback(() => {\n      if (!order || !order.length) return;\n\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      savedHighlightsRef.current = [];\n      savedDecompHighlightsRef.current = [];\n\n      let delay = 500; // Initial delay before the first node is colored\n\n      order.forEach(([id, color]) => {\n        animationTimeoutRef.current.push(\n          setTimeout(() => {\n            setNodesState((nds) =>\n              nds.map((node) => {\n                if (node.id === id) {\n                  if (node.code_lines) {\n                    savedHighlightsRef.current.push({ lineNumbers: node.code_lines, color });\n                  }\n                  if (node.decomp_code_lines) {\n                    savedDecompHighlightsRef.current.push({ lineNumbers: node.decomp_code_lines, color });\n                  }\n\n                  // Apply highlights based on the latest noColorRef state\n                  if (!noColorRef.current) {\n                    applyHighlightsForTab(activeTabRef.current);\n                  } else {\n                    clearHighlights(); // Clear highlights if noColor is toggled during animation\n                  }\n\n                  return {\n                    ...node,\n                    style: {\n                      ...node.style,\n                      background: color,\n                    },\n                  };\n                }\n                return node;\n              })\n            );\n\n            setEdgesState((eds) =>\n              eds.map((edge) => {\n                if (edge.id === id) {\n                  return {\n                    ...edge,\n                    animated: true,\n                    style: {\n                      ...edge.style,\n                      stroke: color,\n                      strokeWidth: 6,\n                    },\n                  };\n                }\n                return edge;\n              })\n            );\n          }, delay)\n        );\n\n        delay += 500; // Increment delay for each subsequent node\n      });\n    }, [order, setNodesState, setEdgesState, applyHighlightsForTab, clearHighlights]);\n\n    useImperativeHandle(ref, () => ({\n      resetGraphColors() {\n        animationTimeoutRef.current.forEach(clearTimeout);\n        animationTimeoutRef.current = [];\n\n        setNodesState((nds) =>\n          nds.map((node) => ({\n            ...node,\n            style: {\n              ...node.style,\n              background: '#D3D3D3',\n            },\n          }))\n        );\n\n        setEdgesState((eds) =>\n          eds.map((edge) => ({\n            ...edge,\n            style: {\n              ...edge.style,\n              stroke: '#D3D3D3',\n            },\n          }))\n        );\n\n        setColoringStarted(false);\n\n        clearHighlights();\n      },\n    }));\n\n    useEffect(() => {\n      activeTabRef.current = activeTab;\n      applyHighlightsForTab(activeTab);\n    }, [activeTab, applyHighlightsForTab]);\n\n    useEffect(() => {\n      if (nodes.length && edges.length && !coloringStarted) {\n        runColorAnimation();\n        setColoringStarted(true);\n      }\n    }, [nodes, edges, runColorAnimation, coloringStarted]);\n\n    // Update noColorRef whenever noColor changes\n    useEffect(() => {\n      noColorRef.current = noColor;\n      if (noColor) {\n        clearHighlights();\n      } else {\n        applyHighlightsForTab(activeTab);\n      }\n    }, [noColor, applyHighlightsForTab, clearHighlights, activeTab]);\n\n    return (\n      <div className=\"graph-display\">\n        <ReactFlow nodes={nodes} edges={edges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange} fitView />\n      </div>\n    );\n  }\n);\n\nexport default GraphDisplay;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,mBAAmB,QAAQ,OAAO;AACxG,OAAOC,SAAS,IAAIC,aAAa,EAAEC,aAAa,EAAEC,YAAY,QAAQ,WAAW;AACjF,OAAO,0BAA0B;AACjC,SAASC,WAAW,QAAQ,qBAAqB;AACjD,OAAOC,GAAG,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,YAAY,gBAAAC,EAAA,cAAGX,UAAU,CAAAY,EAAA,GAAAD,EAAA,CAC7B,CAAC;EAAEE,KAAK,EAAEC,YAAY;EAAEC,KAAK,EAAEC,YAAY;EAAEC,KAAK;EAAEC,SAAS;EAAEC,SAAS;EAAEC;AAAQ,CAAC,EAAEC,GAAG,KAAK;EAAAV,EAAA;EAC3F,MAAM,CAACE,KAAK,EAAES,aAAa,EAAEC,aAAa,CAAC,GAAGpB,aAAa,CAAC,EAAE,CAAC;EAC/D,MAAM,CAACY,KAAK,EAAES,aAAa,EAAEC,aAAa,CAAC,GAAGrB,aAAa,CAAC,EAAE,CAAC;EAC/D,MAAM;IAAEsB;EAAQ,CAAC,GAAGrB,YAAY,CAAC,CAAC;EAClC,MAAMsB,mBAAmB,GAAG7B,MAAM,CAAC,EAAE,CAAC;EACtC,MAAM8B,YAAY,GAAG9B,MAAM,CAACqB,SAAS,CAAC,CAAC,CAAC;EACxC,MAAMU,UAAU,GAAG/B,MAAM,CAACsB,OAAO,CAAC,CAAC,CAAC;EACpC,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMiC,YAAY,GAAGlC,MAAM,CAAC,EAAE,CAAC;EAC/B,MAAMmC,eAAe,GAAGnC,MAAM,CAAC,IAAIoC,GAAG,CAAC,CAAC,CAAC;EACzC,MAAMC,kBAAkB,GAAGrC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;EACvC,MAAMsC,wBAAwB,GAAGtC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE7C,MAAMuC,gBAAgB,GAAIC,KAAK,IAAK;IAClC,IAAI,CAACL,eAAe,CAACM,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,EAAE;MACvC,MAAMG,SAAS,GAAG,aAAaH,KAAK,CAACI,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;MACvD,MAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;MAC7CF,KAAK,CAACG,SAAS,GAAG;AAC1B,aAAaL,SAAS;AACtB;AACA,0BAA0BH,KAAK;AAC/B;AACA;AACA,SAAS;MACDM,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,KAAK,CAAC;MAChCV,eAAe,CAACM,OAAO,CAACU,GAAG,CAACX,KAAK,EAAEG,SAAS,CAAC;IAC/C;IACA,OAAOR,eAAe,CAACM,OAAO,CAACW,GAAG,CAACZ,KAAK,CAAC;EAC3C,CAAC;EAED,MAAMa,eAAe,GAAGtD,WAAW,CAAC,MAAM;IACxC,IAAIqB,SAAS,CAACqB,OAAO,IAAIrB,SAAS,CAACqB,OAAO,CAACa,MAAM,EAAE;MACjD,MAAMC,OAAO,GAAGnC,SAAS,CAACqB,OAAO,CAACa,MAAM,CAACE,UAAU,CAAC,CAAC;MACrDtB,YAAY,CAACO,OAAO,CAACgB,OAAO,CAAEC,QAAQ,IAAKH,OAAO,CAACI,YAAY,CAACD,QAAQ,CAAC,CAAC;MAC1ExB,YAAY,CAACO,OAAO,GAAG,EAAE;IAC3B;EACF,CAAC,EAAE,CAACrB,SAAS,CAAC,CAAC;EAEf,MAAMwC,qBAAqB,GAAG7D,WAAW,CACtC8D,UAAU,IAAK;IACd;IACA,IAAI9B,UAAU,CAACU,OAAO,EAAE;MACtBY,eAAe,CAAC,CAAC;MACjB;IACF;IAEA,IAAIjC,SAAS,CAACqB,OAAO,IAAIrB,SAAS,CAACqB,OAAO,CAACa,MAAM,EAAE;MACjD,MAAMC,OAAO,GAAGnC,SAAS,CAACqB,OAAO,CAACa,MAAM,CAACE,UAAU,CAAC,CAAC;MACrDtB,YAAY,CAACO,OAAO,CAACgB,OAAO,CAAEC,QAAQ,IAAKH,OAAO,CAACI,YAAY,CAACD,QAAQ,CAAC,CAAC;MAC1ExB,YAAY,CAACO,OAAO,GAAG,EAAE;MAEzB,MAAMqB,UAAU,GAAGD,UAAU,KAAK,UAAU,GAAGxB,kBAAkB,CAACI,OAAO,GAAGH,wBAAwB,CAACG,OAAO;MAE5GqB,UAAU,CAACL,OAAO,CAAC,CAAC;QAAEM,WAAW;QAAEvB;MAAM,CAAC,KAAK;QAC7C,MAAMwB,UAAU,GAAGzB,gBAAgB,CAACC,KAAK,CAAC;QAC1CuB,WAAW,CAACN,OAAO,CAAEQ,IAAI,IAAK;UAC5B,MAAMC,KAAK,GAAGzD,GAAG,CAAC0D,OAAO,CAAC,WAAW,CAAC,CAACD,KAAK;UAC5C,MAAMR,QAAQ,GAAGH,OAAO,CAACa,SAAS,CAAC,IAAIF,KAAK,CAACD,IAAI,GAAG,CAAC,EAAE,CAAC,EAAEA,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,EAAED,UAAU,EAAE,UAAU,CAAC;UAC/F9B,YAAY,CAACO,OAAO,CAAC4B,IAAI,CAACX,QAAQ,CAAC;QACrC,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC,EACD,CAACtC,SAAS,EAAEiC,eAAe,CAC7B,CAAC;EAEDvD,SAAS,CAAC,MAAM;IACd,IAAIkB,YAAY,CAACsD,MAAM,IAAIpD,YAAY,CAACoD,MAAM,EAAE;MAC9C,MAAM;QAAEC,WAAW;QAAEC;MAAY,CAAC,GAAGhE,WAAW,CAACQ,YAAY,EAAEE,YAAY,CAAC;MAC5EM,aAAa,CAAC+C,WAAW,CAAC;MAC1B7C,aAAa,CAAC8C,WAAW,CAAC;MAC1B5C,OAAO,CAAC,CAAC;IACX;EACF,CAAC,EAAE,CAACZ,YAAY,EAAEE,YAAY,EAAEM,aAAa,EAAEE,aAAa,EAAEE,OAAO,CAAC,CAAC;EAEvE,MAAM6C,iBAAiB,GAAG1E,WAAW,CAAC,MAAM;IAC1C,IAAI,CAACoB,KAAK,IAAI,CAACA,KAAK,CAACmD,MAAM,EAAE;IAE7BzC,mBAAmB,CAACY,OAAO,CAACgB,OAAO,CAACiB,YAAY,CAAC;IACjD7C,mBAAmB,CAACY,OAAO,GAAG,EAAE;IAChCJ,kBAAkB,CAACI,OAAO,GAAG,EAAE;IAC/BH,wBAAwB,CAACG,OAAO,GAAG,EAAE;IAErC,IAAIkC,KAAK,GAAG,GAAG,CAAC,CAAC;;IAEjBxD,KAAK,CAACsC,OAAO,CAAC,CAAC,CAACmB,EAAE,EAAEpC,KAAK,CAAC,KAAK;MAC7BX,mBAAmB,CAACY,OAAO,CAAC4B,IAAI,CAC9BQ,UAAU,CAAC,MAAM;QACfrD,aAAa,CAAEsD,GAAG,IAChBA,GAAG,CAACC,GAAG,CAAEC,IAAI,IAAK;UAChB,IAAIA,IAAI,CAACJ,EAAE,KAAKA,EAAE,EAAE;YAClB,IAAII,IAAI,CAACC,UAAU,EAAE;cACnB5C,kBAAkB,CAACI,OAAO,CAAC4B,IAAI,CAAC;gBAAEN,WAAW,EAAEiB,IAAI,CAACC,UAAU;gBAAEzC;cAAM,CAAC,CAAC;YAC1E;YACA,IAAIwC,IAAI,CAACE,iBAAiB,EAAE;cAC1B5C,wBAAwB,CAACG,OAAO,CAAC4B,IAAI,CAAC;gBAAEN,WAAW,EAAEiB,IAAI,CAACE,iBAAiB;gBAAE1C;cAAM,CAAC,CAAC;YACvF;;YAEA;YACA,IAAI,CAACT,UAAU,CAACU,OAAO,EAAE;cACvBmB,qBAAqB,CAAC9B,YAAY,CAACW,OAAO,CAAC;YAC7C,CAAC,MAAM;cACLY,eAAe,CAAC,CAAC,CAAC,CAAC;YACrB;YAEA,OAAO;cACL,GAAG2B,IAAI;cACPnC,KAAK,EAAE;gBACL,GAAGmC,IAAI,CAACnC,KAAK;gBACbsC,UAAU,EAAE3C;cACd;YACF,CAAC;UACH;UACA,OAAOwC,IAAI;QACb,CAAC,CACH,CAAC;QAEDtD,aAAa,CAAE0D,GAAG,IAChBA,GAAG,CAACL,GAAG,CAAEM,IAAI,IAAK;UAChB,IAAIA,IAAI,CAACT,EAAE,KAAKA,EAAE,EAAE;YAClB,OAAO;cACL,GAAGS,IAAI;cACPC,QAAQ,EAAE,IAAI;cACdzC,KAAK,EAAE;gBACL,GAAGwC,IAAI,CAACxC,KAAK;gBACb0C,MAAM,EAAE/C,KAAK;gBACbgD,WAAW,EAAE;cACf;YACF,CAAC;UACH;UACA,OAAOH,IAAI;QACb,CAAC,CACH,CAAC;MACH,CAAC,EAAEV,KAAK,CACV,CAAC;MAEDA,KAAK,IAAI,GAAG,CAAC,CAAC;IAChB,CAAC,CAAC;EACJ,CAAC,EAAE,CAACxD,KAAK,EAAEK,aAAa,EAAEE,aAAa,EAAEkC,qBAAqB,EAAEP,eAAe,CAAC,CAAC;EAEjFlD,mBAAmB,CAACoB,GAAG,EAAE,OAAO;IAC9BkE,gBAAgBA,CAAA,EAAG;MACjB5D,mBAAmB,CAACY,OAAO,CAACgB,OAAO,CAACiB,YAAY,CAAC;MACjD7C,mBAAmB,CAACY,OAAO,GAAG,EAAE;MAEhCjB,aAAa,CAAEsD,GAAG,IAChBA,GAAG,CAACC,GAAG,CAAEC,IAAI,KAAM;QACjB,GAAGA,IAAI;QACPnC,KAAK,EAAE;UACL,GAAGmC,IAAI,CAACnC,KAAK;UACbsC,UAAU,EAAE;QACd;MACF,CAAC,CAAC,CACJ,CAAC;MAEDzD,aAAa,CAAE0D,GAAG,IAChBA,GAAG,CAACL,GAAG,CAAEM,IAAI,KAAM;QACjB,GAAGA,IAAI;QACPxC,KAAK,EAAE;UACL,GAAGwC,IAAI,CAACxC,KAAK;UACb0C,MAAM,EAAE;QACV;MACF,CAAC,CAAC,CACJ,CAAC;MAEDtD,kBAAkB,CAAC,KAAK,CAAC;MAEzBoB,eAAe,CAAC,CAAC;IACnB;EACF,CAAC,CAAC,CAAC;EAEHvD,SAAS,CAAC,MAAM;IACdgC,YAAY,CAACW,OAAO,GAAGpB,SAAS;IAChCuC,qBAAqB,CAACvC,SAAS,CAAC;EAClC,CAAC,EAAE,CAACA,SAAS,EAAEuC,qBAAqB,CAAC,CAAC;EAEtC9D,SAAS,CAAC,MAAM;IACd,IAAIiB,KAAK,CAACuD,MAAM,IAAIrD,KAAK,CAACqD,MAAM,IAAI,CAACtC,eAAe,EAAE;MACpDyC,iBAAiB,CAAC,CAAC;MACnBxC,kBAAkB,CAAC,IAAI,CAAC;IAC1B;EACF,CAAC,EAAE,CAAClB,KAAK,EAAEE,KAAK,EAAEwD,iBAAiB,EAAEzC,eAAe,CAAC,CAAC;;EAEtD;EACAlC,SAAS,CAAC,MAAM;IACdiC,UAAU,CAACU,OAAO,GAAGnB,OAAO;IAC5B,IAAIA,OAAO,EAAE;MACX+B,eAAe,CAAC,CAAC;IACnB,CAAC,MAAM;MACLO,qBAAqB,CAACvC,SAAS,CAAC;IAClC;EACF,CAAC,EAAE,CAACC,OAAO,EAAEsC,qBAAqB,EAAEP,eAAe,EAAEhC,SAAS,CAAC,CAAC;EAEhE,oBACEV,OAAA;IAAKgC,SAAS,EAAC,eAAe;IAAA+C,QAAA,eAC5B/E,OAAA,CAACP,SAAS;MAACW,KAAK,EAAEA,KAAM;MAACE,KAAK,EAAEA,KAAM;MAACQ,aAAa,EAAEA,aAAc;MAACE,aAAa,EAAEA,aAAc;MAACC,OAAO;IAAA;MAAA+D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1G,CAAC;AAEV,CAAC;EAAA,QArM+CzF,aAAa,EACbC,aAAa,EACvCC,YAAY;AAAA,EAoMpC,CAAC;EAAA,QAtMiDF,aAAa,EACbC,aAAa,EACvCC,YAAY;AAAA,EAoMnC;AAACwF,GAAA,GAxMInF,YAAY;AA0MlB,eAAeA,YAAY;AAAC,IAAAE,EAAA,EAAAiF,GAAA;AAAAC,YAAA,CAAAlF,EAAA;AAAAkF,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}