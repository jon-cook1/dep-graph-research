{"ast":null,"code":"export const nodeStyles = {\n  custominput: {\n    background: '#D3D3D3',\n    // Default gray background\n    color: '#000000',\n    // White text color\n    border: '2px solid #000000',\n    // Solid black border\n    borderRadius: '50%',\n    // Circular shape\n    width: 100,\n    // Fixed width for all nodes\n    height: 100,\n    // Fixed height for all nodes\n    textAlign: 'center',\n    // Center the text inside the node\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  step: {\n    background: '#D3D3D3',\n    // Default gray background\n    color: '#000000',\n    // White text color\n    border: 'none',\n    // No border for step nodes\n    borderRadius: '50%',\n    // Circular shape\n    width: 100,\n    // Fixed width for all nodes\n    height: 100,\n    // Fixed height for all nodes\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  target: {\n    background: '#D3D3D3',\n    // Default gray background\n    color: '#000000',\n    // White text color\n    border: '2px outset #000000',\n    // Outset black border\n    borderRadius: '50%',\n    // Circular shape\n    width: 100,\n    // Fixed width for all nodes\n    height: 100,\n    // Fixed height for all nodes\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  customoutput: {\n    background: '#D3D3D3',\n    // Default gray background\n    color: '#000000',\n    // White text color\n    border: '2px dashed #000000',\n    // Dashed black border\n    borderRadius: '50%',\n    // Circular shape\n    width: 100,\n    // Fixed width for all nodes\n    height: 100,\n    // Fixed height for all nodes\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n};\n\n// Predefined styles for edges based on their types\nexport const edgeStyles = {\n  passing: {\n    stroke: '#FF9900',\n    strokeWidth: 3,\n    animated: true,\n    color: '#000000' // Black text color for edges\n  },\n  internal: {\n    stroke: '#00FFCC',\n    strokeWidth: 2,\n    animated: false,\n    color: '#000000' // Black text color for edges\n  }\n};\n\n// Function to apply styles to nodes and edges based on type\nexport const applyStyles = (nodes, edges) => {\n  const styledNodes = nodes.map(node => ({\n    ...node,\n    style: nodeStyles[node.mytype] || {}\n  }));\n  const styledEdges = edges.map(edge => ({\n    ...edge,\n    style: edgeStyles[edge.type] || {}\n  }));\n  return {\n    styledNodes,\n    styledEdges\n  };\n};","map":{"version":3,"names":["nodeStyles","custominput","background","color","border","borderRadius","width","height","textAlign","display","justifyContent","alignItems","step","target","customoutput","edgeStyles","passing","stroke","strokeWidth","animated","internal","applyStyles","nodes","edges","styledNodes","map","node","style","mytype","styledEdges","edge","type"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/utils/GraphUtils.js"],"sourcesContent":["export const nodeStyles = {\n  custominput: {\n    background: '#D3D3D3', // Default gray background\n    color: '#000000',       // White text color\n    border: '2px solid #000000', // Solid black border\n    borderRadius: '50%',    // Circular shape\n    width: 100,             // Fixed width for all nodes\n    height: 100,            // Fixed height for all nodes\n    textAlign: 'center',    // Center the text inside the node\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  step: {\n    background: '#D3D3D3', // Default gray background\n    color: '#000000',       // White text color\n    border: 'none',         // No border for step nodes\n    borderRadius: '50%',    // Circular shape\n    width: 100,             // Fixed width for all nodes\n    height: 100,            // Fixed height for all nodes\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  target: {\n    background: '#D3D3D3',  // Default gray background\n    color: '#000000',        // White text color\n    border: '2px outset #000000', // Outset black border\n    borderRadius: '50%',    // Circular shape\n    width: 100,             // Fixed width for all nodes\n    height: 100,            // Fixed height for all nodes\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  customoutput: {\n    background: '#D3D3D3',   // Default gray background\n    color: '#000000',         // White text color\n    border: '2px dashed #000000', // Dashed black border\n    borderRadius: '50%',     // Circular shape\n    width: 100,              // Fixed width for all nodes\n    height: 100,             // Fixed height for all nodes\n    textAlign: 'center',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n};\n  \n  // Predefined styles for edges based on their types\n  export const edgeStyles = {\n    passing: {\n      stroke: '#FF9900',\n      strokeWidth: 3,\n      animated: true,\n      color: '#000000',  // Black text color for edges\n    },\n    internal: {\n      stroke: '#00FFCC',\n      strokeWidth: 2,\n      animated: false,\n      color: '#000000',  // Black text color for edges\n    }\n  };\n  \n  // Function to apply styles to nodes and edges based on type\n  export const applyStyles = (nodes, edges) => {\n    const styledNodes = nodes.map((node) => ({\n      ...node,\n      style: nodeStyles[node.mytype] || {},\n    }));\n  \n    const styledEdges = edges.map((edge) => ({\n      ...edge,\n      style: edgeStyles[edge.type] || {},\n    }));\n  \n    return { styledNodes, styledEdges };\n  };\n  "],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAG;EACxBC,WAAW,EAAE;IACXC,UAAU,EAAE,SAAS;IAAE;IACvBC,KAAK,EAAE,SAAS;IAAQ;IACxBC,MAAM,EAAE,mBAAmB;IAAE;IAC7BC,YAAY,EAAE,KAAK;IAAK;IACxBC,KAAK,EAAE,GAAG;IAAc;IACxBC,MAAM,EAAE,GAAG;IAAa;IACxBC,SAAS,EAAE,QAAQ;IAAK;IACxBC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDC,IAAI,EAAE;IACJV,UAAU,EAAE,SAAS;IAAE;IACvBC,KAAK,EAAE,SAAS;IAAQ;IACxBC,MAAM,EAAE,MAAM;IAAU;IACxBC,YAAY,EAAE,KAAK;IAAK;IACxBC,KAAK,EAAE,GAAG;IAAc;IACxBC,MAAM,EAAE,GAAG;IAAa;IACxBC,SAAS,EAAE,QAAQ;IACnBC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDE,MAAM,EAAE;IACNX,UAAU,EAAE,SAAS;IAAG;IACxBC,KAAK,EAAE,SAAS;IAAS;IACzBC,MAAM,EAAE,oBAAoB;IAAE;IAC9BC,YAAY,EAAE,KAAK;IAAK;IACxBC,KAAK,EAAE,GAAG;IAAc;IACxBC,MAAM,EAAE,GAAG;IAAa;IACxBC,SAAS,EAAE,QAAQ;IACnBC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd,CAAC;EACDG,YAAY,EAAE;IACZZ,UAAU,EAAE,SAAS;IAAI;IACzBC,KAAK,EAAE,SAAS;IAAU;IAC1BC,MAAM,EAAE,oBAAoB;IAAE;IAC9BC,YAAY,EAAE,KAAK;IAAM;IACzBC,KAAK,EAAE,GAAG;IAAe;IACzBC,MAAM,EAAE,GAAG;IAAc;IACzBC,SAAS,EAAE,QAAQ;IACnBC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE;EACd;AACF,CAAC;;AAEC;AACA,OAAO,MAAMI,UAAU,GAAG;EACxBC,OAAO,EAAE;IACPC,MAAM,EAAE,SAAS;IACjBC,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,IAAI;IACdhB,KAAK,EAAE,SAAS,CAAG;EACrB,CAAC;EACDiB,QAAQ,EAAE;IACRH,MAAM,EAAE,SAAS;IACjBC,WAAW,EAAE,CAAC;IACdC,QAAQ,EAAE,KAAK;IACfhB,KAAK,EAAE,SAAS,CAAG;EACrB;AACF,CAAC;;AAED;AACA,OAAO,MAAMkB,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;EAC3C,MAAMC,WAAW,GAAGF,KAAK,CAACG,GAAG,CAAEC,IAAI,KAAM;IACvC,GAAGA,IAAI;IACPC,KAAK,EAAE3B,UAAU,CAAC0B,IAAI,CAACE,MAAM,CAAC,IAAI,CAAC;EACrC,CAAC,CAAC,CAAC;EAEH,MAAMC,WAAW,GAAGN,KAAK,CAACE,GAAG,CAAEK,IAAI,KAAM;IACvC,GAAGA,IAAI;IACPH,KAAK,EAAEZ,UAAU,CAACe,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;EACnC,CAAC,CAAC,CAAC;EAEH,OAAO;IAAEP,WAAW;IAAEK;EAAY,CAAC;AACrC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}