{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/components/CodeEditor.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [code, setCode] = useState('# Write your Python code here\\n');\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [processCodeSignal, setProcessCodeSignal] = useState(false); // Signal for processing\n  const editorRef = useRef(null);\n  const handleProcessCode = () => {\n    // Trigger the process code functionality\n    setProcessCodeSignal(prev => !prev); // Toggle signal to trigger decomposed code update\n\n    // Set nodes and edges for development purposes\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"process-button\",\n        onClick: handleProcessCode,\n        children: \"Process Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n        code: code,\n        setCode: setCode,\n        editorRef: editorRef,\n        onProcessCode: processCodeSignal // Pass the signal to CodeEditor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-section\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n        children: /*#__PURE__*/_jsxDEV(GraphDisplay, {\n          nodes: nodes,\n          edges: edges,\n          order: order,\n          editorRef: editorRef,\n          setNodes: setNodes,\n          setEdges: setEdges\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"cDdHTzO+YljB4piE8sfCQjxtHkI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","CodeEditor","GraphDisplay","ReactFlowProvider","initialNodes","initialEdges","order","jsxDEV","_jsxDEV","App","_s","code","setCode","nodes","setNodes","edges","setEdges","processCodeSignal","setProcessCodeSignal","editorRef","handleProcessCode","prev","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onProcessCode","_c","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/components/CodeEditor.js"],"sourcesContent":["// App.js\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\n\nfunction App() {\n  const [code, setCode] = useState('# Write your Python code here\\n');\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [processCodeSignal, setProcessCodeSignal] = useState(false); // Signal for processing\n  const editorRef = useRef(null);\n\n  const handleProcessCode = () => {\n    // Trigger the process code functionality\n    setProcessCodeSignal((prev) => !prev); // Toggle signal to trigger decomposed code update\n\n    // Set nodes and edges for development purposes\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"editor-section\">\n        <button className=\"process-button\" onClick={handleProcessCode}>\n          Process Code\n        </button>\n        <CodeEditor\n          code={code}\n          setCode={setCode}\n          editorRef={editorRef}\n          onProcessCode={processCodeSignal} // Pass the signal to CodeEditor\n        />\n      </div>\n      <div className=\"graph-section\">\n        <ReactFlowProvider>\n          <GraphDisplay\n            nodes={nodes}\n            edges={edges}\n            order={order}\n            editorRef={editorRef} \n            setNodes={setNodes}\n            setEdges={setEdges}\n          />\n        </ReactFlowProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAO,WAAW;AAClB,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,SAASC,iBAAiB,QAAQ,WAAW;AAC7C,SAASC,YAAY,EAAEC,YAAY,EAAEC,KAAK,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,iCAAiC,CAAC;EACnE,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACkB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACnE,MAAMoB,SAAS,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAE9B,MAAMoB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACAF,oBAAoB,CAAEG,IAAI,IAAK,CAACA,IAAI,CAAC,CAAC,CAAC;;IAEvC;IACAP,QAAQ,CAACV,YAAY,CAAC;IACtBY,QAAQ,CAACX,YAAY,CAAC;EACxB,CAAC;EAED,oBACEG,OAAA;IAAKc,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5Bf,OAAA;MAAKc,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7Bf,OAAA;QAAQc,SAAS,EAAC,gBAAgB;QAACE,OAAO,EAAEJ,iBAAkB;QAAAG,QAAA,EAAC;MAE/D;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpB,OAAA,CAACP,UAAU;QACTU,IAAI,EAAEA,IAAK;QACXC,OAAO,EAAEA,OAAQ;QACjBO,SAAS,EAAEA,SAAU;QACrBU,aAAa,EAAEZ,iBAAkB,CAAC;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNpB,OAAA;MAAKc,SAAS,EAAC,eAAe;MAAAC,QAAA,eAC5Bf,OAAA,CAACL,iBAAiB;QAAAoB,QAAA,eAChBf,OAAA,CAACN,YAAY;UACXW,KAAK,EAAEA,KAAM;UACbE,KAAK,EAAEA,KAAM;UACbT,KAAK,EAAEA,KAAM;UACba,SAAS,EAAEA,SAAU;UACrBL,QAAQ,EAAEA,QAAS;UACnBE,QAAQ,EAAEA;QAAS;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACe;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAClB,EAAA,CA3CQD,GAAG;AAAAqB,EAAA,GAAHrB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}