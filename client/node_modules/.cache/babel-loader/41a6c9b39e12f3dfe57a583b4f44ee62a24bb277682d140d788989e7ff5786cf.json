{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [buffers, setBuffers] = useState({\n    Original: '# Write your Python code here\\n',\n    Decomposed: ''\n  });\n  const [activeTab, setActiveTab] = useState('Original');\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const editorRef = useRef(null); // Ref for the CodeEditor\n  const graphDisplayRef = useRef(null); // Ref for GraphDisplay to access resetGraphColors\n\n  const handleProcessCode = () => {\n    const decomposedContent = `# Decomposed code based on ${buffers.Original}`;\n    setBuffers(prevBuffers => ({\n      ...prevBuffers,\n      Decomposed: decomposedContent\n    }));\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  const handleRerunAnimation = () => {\n    if (graphDisplayRef.current) {\n      graphDisplayRef.current.resetGraphColors();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [\"\\\\      \", /*#__PURE__*/_jsxDEV(ButtonPanel, {\n      onProcessCode: handleProcessCode,\n      onTabChange: setActiveTab,\n      activeTab: activeTab,\n      onRerunAnimation: handleRerunAnimation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-section\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          code: buffers[activeTab],\n          setCode: newCode => setBuffers(prevBuffers => ({\n            ...prevBuffers,\n            [activeTab]: newCode\n          })),\n          editorRef: editorRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(GraphDisplay, {\n            ref: graphDisplayRef // Attach ref to GraphDisplay for resetGraphColors access\n            ,\n            nodes: nodes,\n            edges: edges,\n            order: order,\n            editorRef: editorRef,\n            setNodes: setNodes,\n            setEdges: setEdges\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"pj0Cru033LkLJYhBI+JqxNh5AWA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","ButtonPanel","CodeEditor","GraphDisplay","ReactFlowProvider","initialNodes","initialEdges","order","jsxDEV","_jsxDEV","App","_s","buffers","setBuffers","Original","Decomposed","activeTab","setActiveTab","nodes","setNodes","edges","setEdges","editorRef","graphDisplayRef","handleProcessCode","decomposedContent","prevBuffers","handleRerunAnimation","current","resetGraphColors","className","children","onProcessCode","onTabChange","onRerunAnimation","fileName","_jsxFileName","lineNumber","columnNumber","code","setCode","newCode","ref","_c","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useRef } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\n\nfunction App() {\n  const [buffers, setBuffers] = useState({\n    Original: '# Write your Python code here\\n',\n    Decomposed: '',\n  });\n  const [activeTab, setActiveTab] = useState('Original');\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  \n  const editorRef = useRef(null); // Ref for the CodeEditor\n  const graphDisplayRef = useRef(null); // Ref for GraphDisplay to access resetGraphColors\n\n  const handleProcessCode = () => {\n    const decomposedContent = `# Decomposed code based on ${buffers.Original}`;\n    setBuffers((prevBuffers) => ({\n      ...prevBuffers,\n      Decomposed: decomposedContent,\n    }));\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n\n  const handleRerunAnimation = () => {\n    if (graphDisplayRef.current) {\n      graphDisplayRef.current.resetGraphColors();\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n\\      <ButtonPanel\n        onProcessCode={handleProcessCode}\n        onTabChange={setActiveTab}\n        activeTab={activeTab}\n        onRerunAnimation={handleRerunAnimation}\n      />\n\n      <div className=\"content-container\">\n        <div className=\"editor-section\">\n          <CodeEditor\n            code={buffers[activeTab]}\n            setCode={(newCode) =>\n              setBuffers((prevBuffers) => ({\n                ...prevBuffers,\n                [activeTab]: newCode,\n              }))\n            }\n            editorRef={editorRef}\n          />\n        </div>\n\n        <div className=\"graph-section\">\n          <ReactFlowProvider>\n            <GraphDisplay\n              ref={graphDisplayRef} // Attach ref to GraphDisplay for resetGraphColors access\n              nodes={nodes}\n              edges={edges}\n              order={order}\n              editorRef={editorRef}\n              setNodes={setNodes}\n              setEdges={setEdges}\n            />\n          </ReactFlowProvider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}