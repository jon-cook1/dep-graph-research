{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\nimport ace from 'ace-builds';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  nodes: initialNodes,\n  edges: initialEdges,\n  order,\n  editorRef,\n  activeTab\n}, ref) => {\n  _s();\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const {\n    fitView\n  } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  const colorClassesRef = useRef(new Map());\n  const markerIdsRef = useRef([]); // Used to track and clear current highlights\n  const savedOriginalHighlights = useRef([]); // Store \"Original\" highlights here\n\n  const createColorClass = color => {\n    if (!colorClassesRef.current.has(color)) {\n      const className = `highlight-${color.replace('#', '')}`;\n      const style = document.createElement('style');\n      style.innerHTML = `\n        .${className} {\n          position: absolute;\n          background: ${color}40;\n          z-index: 20;\n        }\n      `;\n      document.head.appendChild(style);\n      colorClassesRef.current.set(color, className);\n    }\n    return colorClassesRef.current.get(color);\n  };\n  const highlightCodeLines = useCallback((lineNumbers, color) => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      const Range = ace.require('ace/range').Range;\n      const colorClass = createColorClass(color);\n      const markers = lineNumbers.map(line => {\n        const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        return {\n          line,\n          markerId,\n          colorClass\n        };\n      });\n      markerIdsRef.current.push(...markers);\n      return markers;\n    }\n  }, [editorRef]);\n  const saveOriginalHighlights = () => {\n    savedOriginalHighlights.current = markerIdsRef.current.map(marker => ({\n      ...marker\n    }));\n  };\n  const clearHighlights = () => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current.forEach(({\n        markerId\n      }) => session.removeMarker(markerId));\n      markerIdsRef.current = []; // Reset markers tracking\n    }\n  };\n  const applyOriginalHighlights = () => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current = savedOriginalHighlights.current.map(({\n        line,\n        colorClass\n      }) => {\n        const markerId = session.addMarker(new ace.Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        return {\n          line,\n          markerId,\n          colorClass\n        };\n      });\n    }\n  };\n  useEffect(() => {\n    if (nodes.length && edges.length) {\n      const {\n        styledNodes,\n        styledEdges\n      } = applyStyles(initialNodes, initialEdges);\n      setNodesState(styledNodes);\n      setEdgesState(styledEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n    clearHighlights(); // Clear any existing highlights\n\n    let delay = 0;\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(setTimeout(() => {\n        setNodesState(nds => nds.map(node => {\n          if (node.id === id) {\n            const newHighlights = highlightCodeLines(node.code_lines || [], color);\n            markerIdsRef.current.push(...newHighlights); // Track highlights for this animation\n            return {\n              ...node,\n              style: {\n                ...node.style,\n                background: color\n              }\n            };\n          }\n          return node;\n        }));\n        setEdgesState(eds => eds.map(edge => {\n          if (edge.id === id) {\n            return {\n              ...edge,\n              animated: true,\n              style: {\n                ...edge.style,\n                stroke: color,\n                strokeWidth: 6\n              }\n            };\n          }\n          return edge;\n        }));\n      }, delay));\n      delay += 500;\n    });\n\n    // Save highlights after animation is done\n    setTimeout(saveOriginalHighlights, delay);\n  }, [order, setNodesState, setEdgesState, highlightCodeLines]);\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      setNodesState(nds => nds.map(node => ({\n        ...node,\n        style: {\n          ...node.style,\n          background: '#D3D3D3'\n        }\n      })));\n      setEdgesState(eds => eds.map(edge => ({\n        ...edge,\n        style: {\n          ...edge.style,\n          stroke: '#D3D3D3'\n        }\n      })));\n      clearHighlights(); // Clear all markers\n    }\n  }));\n\n  // Manage highlights on tab switch\n  useEffect(() => {\n    if (activeTab === 'Original') {\n      applyOriginalHighlights(); // Reapply saved original highlights\n    } else {\n      clearHighlights(); // Clear all highlights when in Decomposed view\n    }\n  }, [activeTab]);\n  useEffect(() => {\n    if (nodes.length && edges.length) {\n      runColorAnimation();\n    }\n  }, [nodes, edges, runColorAnimation]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-display\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}, \"i+BtUyGchJ014XjQVlOsT7VM7u8=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n})), \"i+BtUyGchJ014XjQVlOsT7VM7u8=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c2 = GraphDisplay;\nexport default GraphDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphDisplay$forwardRef\");\n$RefreshReg$(_c2, \"GraphDisplay\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","useState","forwardRef","useImperativeHandle","ReactFlow","useNodesState","useEdgesState","useReactFlow","applyStyles","ace","jsxDEV","_jsxDEV","GraphDisplay","_s","_c","nodes","initialNodes","edges","initialEdges","order","editorRef","activeTab","ref","setNodesState","onNodesChange","setEdgesState","onEdgesChange","fitView","animationTimeoutRef","colorClassesRef","Map","markerIdsRef","savedOriginalHighlights","createColorClass","color","current","has","className","replace","style","document","createElement","innerHTML","head","appendChild","set","get","highlightCodeLines","lineNumbers","editor","session","getSession","Range","require","colorClass","markers","map","line","markerId","addMarker","push","saveOriginalHighlights","marker","clearHighlights","forEach","removeMarker","applyOriginalHighlights","length","styledNodes","styledEdges","runColorAnimation","clearTimeout","delay","id","setTimeout","nds","node","newHighlights","code_lines","background","eds","edge","animated","stroke","strokeWidth","resetGraphColors","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js"],"sourcesContent":["import React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\nimport ace from 'ace-builds';\n\nconst GraphDisplay = forwardRef(({ nodes: initialNodes, edges: initialEdges, order, editorRef, activeTab }, ref) => {\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const { fitView } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  const colorClassesRef = useRef(new Map());\n  const markerIdsRef = useRef([]); // Used to track and clear current highlights\n  const savedOriginalHighlights = useRef([]); // Store \"Original\" highlights here\n\n  const createColorClass = (color) => {\n    if (!colorClassesRef.current.has(color)) {\n      const className = `highlight-${color.replace('#', '')}`;\n      const style = document.createElement('style');\n      style.innerHTML = `\n        .${className} {\n          position: absolute;\n          background: ${color}40;\n          z-index: 20;\n        }\n      `;\n      document.head.appendChild(style);\n      colorClassesRef.current.set(color, className);\n    }\n    return colorClassesRef.current.get(color);\n  };\n\n  const highlightCodeLines = useCallback((lineNumbers, color) => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      const Range = ace.require('ace/range').Range;\n\n      const colorClass = createColorClass(color);\n\n      const markers = lineNumbers.map((line) => {\n        const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        return { line, markerId, colorClass };\n      });\n\n      markerIdsRef.current.push(...markers);\n      return markers;\n    }\n  }, [editorRef]);\n\n  const saveOriginalHighlights = () => {\n    savedOriginalHighlights.current = markerIdsRef.current.map((marker) => ({\n      ...marker,\n    }));\n  };\n\n  const clearHighlights = () => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current.forEach(({ markerId }) => session.removeMarker(markerId));\n      markerIdsRef.current = []; // Reset markers tracking\n    }\n  };\n\n  const applyOriginalHighlights = () => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current = savedOriginalHighlights.current.map(({ line, colorClass }) => {\n        const markerId = session.addMarker(new ace.Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        return { line, markerId, colorClass };\n      });\n    }\n  };\n\n  useEffect(() => {\n    if (nodes.length && edges.length) {\n      const { styledNodes, styledEdges } = applyStyles(initialNodes, initialEdges);\n      setNodesState(styledNodes);\n      setEdgesState(styledEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n    clearHighlights(); // Clear any existing highlights\n\n    let delay = 0;\n\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(\n        setTimeout(() => {\n          setNodesState((nds) =>\n            nds.map((node) => {\n              if (node.id === id) {\n                const newHighlights = highlightCodeLines(node.code_lines || [], color);\n                markerIdsRef.current.push(...newHighlights); // Track highlights for this animation\n                return {\n                  ...node,\n                  style: {\n                    ...node.style,\n                    background: color,\n                  },\n                };\n              }\n              return node;\n            })\n          );\n\n          setEdgesState((eds) =>\n            eds.map((edge) => {\n              if (edge.id === id) {\n                return {\n                  ...edge,\n                  animated: true,\n                  style: {\n                    ...edge.style,\n                    stroke: color,\n                    strokeWidth: 6,\n                  },\n                };\n              }\n              return edge;\n            })\n          );\n        }, delay)\n      );\n\n      delay += 500;\n    });\n\n    // Save highlights after animation is done\n    setTimeout(saveOriginalHighlights, delay);\n  }, [order, setNodesState, setEdgesState, highlightCodeLines]);\n\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n\n      setNodesState((nds) =>\n        nds.map((node) => ({\n          ...node,\n          style: {\n            ...node.style,\n            background: '#D3D3D3',\n          },\n        }))\n      );\n\n      setEdgesState((eds) =>\n        eds.map((edge) => ({\n          ...edge,\n          style: {\n            ...edge.style,\n            stroke: '#D3D3D3',\n          },\n        }))\n      );\n\n      clearHighlights(); // Clear all markers\n    },\n  }));\n\n  // Manage highlights on tab switch\n  useEffect(() => {\n    if (activeTab === 'Original') {\n      applyOriginalHighlights(); // Reapply saved original highlights\n    } else {\n      clearHighlights(); // Clear all highlights when in Decomposed view\n    }\n  }, [activeTab]);\n\n  useEffect(() => {\n    if (nodes.length && edges.length) {\n      runColorAnimation();\n    }\n  }, [nodes, edges, runColorAnimation]);\n\n  return (\n    <div className=\"graph-display\">\n      <ReactFlow nodes={nodes} edges={edges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange} fitView />\n    </div>\n  );\n});\n\nexport default GraphDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}