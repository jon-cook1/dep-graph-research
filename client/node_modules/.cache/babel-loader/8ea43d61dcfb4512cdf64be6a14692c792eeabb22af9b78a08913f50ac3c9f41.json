{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\n// Removed: ace import since highlighting logic is disabled\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  nodes: initialNodes,\n  edges: initialEdges,\n  order,\n  editorRef,\n  activeTab,\n  noColor\n}, ref) => {\n  _s();\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const {\n    fitView\n  } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  // Removed: activeTabRef, markerIdsRef, colorClassesRef, savedHighlightsRef, savedDecompHighlightsRef, temporaryHighlightsRef\n  // const activeTabRef = useRef(activeTab);\n  // const markerIdsRef = useRef([]);\n  // const colorClassesRef = useRef(new Map());\n  // const savedHighlightsRef = useRef([]);\n  // const savedDecompHighlightsRef = useRef([]);\n  // const temporaryHighlightsRef = useRef([]);\n\n  const noColorRef = useRef(noColor);\n  const [coloringStarted, setColoringStarted] = useState(false);\n\n  // Removed: createColorClass, clearHighlights, applyHighlights, applyHighlightsForTab functions\n\n  // Updated: handleNodeClick now does nothing regarding highlighting.\n  const handleNodeClick = useCallback(node => {\n    // No highlighting logic for node clicks.\n  }, []);\n  useEffect(() => {\n    if (initialNodes && initialNodes.length && initialEdges && initialEdges.length) {\n      const {\n        styledNodes,\n        styledEdges\n      } = applyStyles(initialNodes, initialEdges);\n      setNodesState(styledNodes);\n      setEdgesState(styledEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n\n  // Color animation logic remains.\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n    // Removed: savedHighlightsRef, savedDecompHighlightsRef, and temporaryHighlightsRef resets\n\n    let delay = 1000;\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(setTimeout(() => {\n        setNodesState(nds => nds.map(node => {\n          if (node.id === id) {\n            // Removed: any highlighting-related logic.\n            return {\n              ...node,\n              style: {\n                ...node.style,\n                background: color\n              }\n            };\n          }\n          return node;\n        }));\n        setEdgesState(eds => eds.map(edge => {\n          if (edge.id === id) {\n            return {\n              ...edge,\n              animated: true,\n              style: {\n                ...edge.style,\n                stroke: color,\n                strokeWidth: 6\n              }\n            };\n          }\n          return edge;\n        }));\n      }, delay));\n      delay += 500;\n    });\n  }, [order, setNodesState, setEdgesState]);\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      setNodesState(nds => nds.map(node => ({\n        ...node,\n        style: {\n          ...node.style,\n          background: '#D3D3D3'\n        }\n      })));\n      setEdgesState(eds => eds.map(edge => ({\n        ...edge,\n        style: {\n          ...edge.style,\n          stroke: '#D3D3D3'\n        }\n      })));\n      setColoringStarted(false);\n\n      // Removed: clearHighlights call\n    }\n  }));\n\n  // Removed: useEffect handling activeTab and applying highlights.\n  // useEffect(() => {\n  //   activeTabRef.current = activeTab;\n  //   applyHighlightsForTab(activeTab);\n  // }, [activeTab, applyHighlightsForTab]);\n\n  useEffect(() => {\n    if (nodes.length && edges.length && !coloringStarted) {\n      runColorAnimation();\n      setColoringStarted(true);\n    }\n  }, [nodes, edges, runColorAnimation, coloringStarted]);\n\n  // Removed: useEffect handling noColor changes for highlights.\n  // useEffect(() => {\n  //   noColorRef.current = noColor;\n  //   if (noColor) {\n  //     clearHighlights();\n  //   } else {\n  //     applyHighlightsForTab(activeTab);\n  //   }\n  // }, [noColor, applyHighlightsForTab, clearHighlights, activeTab]);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-display\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true,\n      onNodeClick: (_, node) => handleNodeClick(node) // Node click now does nothing regarding highlighting.\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 7\n  }, this);\n}, \"4dBBw1G7ygKV4GHoncFHeG8tG/4=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n})), \"4dBBw1G7ygKV4GHoncFHeG8tG/4=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c2 = GraphDisplay;\ne;\nexport default GraphDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphDisplay$forwardRef\");\n$RefreshReg$(_c2, \"GraphDisplay\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","useState","forwardRef","useImperativeHandle","ReactFlow","useNodesState","useEdgesState","useReactFlow","applyStyles","jsxDEV","_jsxDEV","GraphDisplay","_s","_c","nodes","initialNodes","edges","initialEdges","order","editorRef","activeTab","noColor","ref","setNodesState","onNodesChange","setEdgesState","onEdgesChange","fitView","animationTimeoutRef","noColorRef","coloringStarted","setColoringStarted","handleNodeClick","node","length","styledNodes","styledEdges","runColorAnimation","current","forEach","clearTimeout","delay","id","color","push","setTimeout","nds","map","style","background","eds","edge","animated","stroke","strokeWidth","resetGraphColors","className","children","onNodeClick","_","fileName","_jsxFileName","lineNumber","columnNumber","_c2","e","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js"],"sourcesContent":["import React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\n// Removed: ace import since highlighting logic is disabled\n\nconst GraphDisplay = forwardRef(\n  ({ nodes: initialNodes, edges: initialEdges, order, editorRef, activeTab, noColor }, ref) => {\n    const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n    const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n    const { fitView } = useReactFlow();\n    const animationTimeoutRef = useRef([]);\n    // Removed: activeTabRef, markerIdsRef, colorClassesRef, savedHighlightsRef, savedDecompHighlightsRef, temporaryHighlightsRef\n    // const activeTabRef = useRef(activeTab);\n    // const markerIdsRef = useRef([]);\n    // const colorClassesRef = useRef(new Map());\n    // const savedHighlightsRef = useRef([]);\n    // const savedDecompHighlightsRef = useRef([]);\n    // const temporaryHighlightsRef = useRef([]);\n\n    const noColorRef = useRef(noColor);\n    const [coloringStarted, setColoringStarted] = useState(false);\n\n    // Removed: createColorClass, clearHighlights, applyHighlights, applyHighlightsForTab functions\n\n    // Updated: handleNodeClick now does nothing regarding highlighting.\n    const handleNodeClick = useCallback(\n      (node) => {\n        // No highlighting logic for node clicks.\n      },\n      []\n    );\n\n    useEffect(() => {\n      if (initialNodes && initialNodes.length && initialEdges && initialEdges.length) {\n        const { styledNodes, styledEdges } = applyStyles(initialNodes, initialEdges);\n        setNodesState(styledNodes);\n        setEdgesState(styledEdges);\n        fitView();\n      }\n    }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n\n    // Color animation logic remains.\n    const runColorAnimation = useCallback(() => {\n      if (!order || !order.length) return;\n\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      // Removed: savedHighlightsRef, savedDecompHighlightsRef, and temporaryHighlightsRef resets\n\n      let delay = 1000; \n\n      order.forEach(([id, color]) => {\n        animationTimeoutRef.current.push(\n          setTimeout(() => {\n            setNodesState((nds) =>\n              nds.map((node) => {\n                if (node.id === id) {\n                  // Removed: any highlighting-related logic.\n                  return {\n                    ...node,\n                    style: {\n                      ...node.style,\n                      background: color,\n                    },\n                  };\n                }\n                return node;\n              })\n            );\n\n            setEdgesState((eds) =>\n              eds.map((edge) => {\n                if (edge.id === id) {\n                  return {\n                    ...edge,\n                    animated: true,\n                    style: {\n                      ...edge.style,\n                      stroke: color,\n                      strokeWidth: 6,\n                    },\n                  };\n                }\n                return edge;\n              })\n            );\n          }, delay)\n        );\n\n        delay += 500;\n      });\n    }, [order, setNodesState, setEdgesState]);\n\n    useImperativeHandle(ref, () => ({\n      resetGraphColors() {\n        animationTimeoutRef.current.forEach(clearTimeout);\n        animationTimeoutRef.current = [];\n\n        setNodesState((nds) =>\n          nds.map((node) => ({\n            ...node,\n            style: {\n              ...node.style,\n              background: '#D3D3D3',\n            },\n          }))\n        );\n\n        setEdgesState((eds) =>\n          eds.map((edge) => ({\n            ...edge,\n            style: {\n              ...edge.style,\n              stroke: '#D3D3D3',\n            },\n          }))\n        );\n\n        setColoringStarted(false);\n\n        // Removed: clearHighlights call\n      },\n    }));\n\n    // Removed: useEffect handling activeTab and applying highlights.\n    // useEffect(() => {\n    //   activeTabRef.current = activeTab;\n    //   applyHighlightsForTab(activeTab);\n    // }, [activeTab, applyHighlightsForTab]);\n\n    useEffect(() => {\n      if (nodes.length && edges.length && !coloringStarted) {\n        runColorAnimation();\n        setColoringStarted(true);\n      }\n    }, [nodes, edges, runColorAnimation, coloringStarted]);\n\n    // Removed: useEffect handling noColor changes for highlights.\n    // useEffect(() => {\n    //   noColorRef.current = noColor;\n    //   if (noColor) {\n    //     clearHighlights();\n    //   } else {\n    //     applyHighlightsForTab(activeTab);\n    //   }\n    // }, [noColor, applyHighlightsForTab, clearHighlights, activeTab]);\n\n    return (\n      <div className=\"graph-display\">\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          fitView\n          onNodeClick={(_, node) => handleNodeClick(node)} // Node click now does nothing regarding highlighting.\n        />\n      </div>\n    );\n  }\n);e\n\nexport default GraphDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}