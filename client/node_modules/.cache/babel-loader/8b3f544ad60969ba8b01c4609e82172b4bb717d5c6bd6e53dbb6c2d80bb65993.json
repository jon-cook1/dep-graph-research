{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport ace from 'ace-builds';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  nodes: initialNodes,\n  edges: initialEdges,\n  order,\n  editorRef,\n  activeTab\n}, ref) => {\n  _s();\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const {\n    fitView\n  } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  const [coloringStarted, setColoringStarted] = useState(false);\n  const markerIdsRef = useRef([]);\n  const colorClassesRef = useRef(new Map());\n  const highlightDataRef = useRef([]);\n  const savedHighlightsRef = useRef([]);\n  const [animationCompleted, setAnimationCompleted] = useState(false);\n\n  // Map to store original background and stroke styles\n  const originalNodeStylesRef = useRef([]);\n  const originalEdgeStylesRef = useRef([]);\n  const createColorClass = color => {\n    if (!colorClassesRef.current.has(color)) {\n      const className = `highlight-${color.replace('#', '')}`;\n      const style = document.createElement('style');\n      style.innerHTML = `\n          .${className} {\n            position: absolute;\n            background: ${color}40;\n            z-index: 20;\n          }\n        `;\n      document.head.appendChild(style);\n      colorClassesRef.current.set(color, className);\n    }\n    return colorClassesRef.current.get(color);\n  };\n  const highlightCodeLines = useCallback((lineNumbers, color) => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      const Range = ace.require('ace/range').Range;\n      const colorClass = createColorClass(color);\n      lineNumbers.forEach(line => {\n        const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        markerIdsRef.current.push(markerId);\n      });\n    }\n  }, [editorRef]);\n  useEffect(() => {\n    if (initialNodes.length && initialEdges.length) {\n      // Store the initial styles only once\n      if (!originalNodeStylesRef.current.length && !originalEdgeStylesRef.current.length) {\n        originalNodeStylesRef.current = initialNodes.map(node => ({\n          id: node.id,\n          style: node.style\n        }));\n        originalEdgeStylesRef.current = initialEdges.map(edge => ({\n          id: edge.id,\n          style: edge.style\n        }));\n      }\n      setNodesState(initialNodes);\n      setEdgesState(initialEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n    highlightDataRef.current = []; // Reset highlight data\n\n    let delay = 0;\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(setTimeout(() => {\n        setNodesState(nds => nds.map(node => {\n          if (node.id === id) {\n            const nodeLines = node.code_lines || [];\n            if (nodeLines.length > 0) {\n              highlightCodeLines(nodeLines, color);\n              highlightDataRef.current.push({\n                lineNumbers: nodeLines,\n                color\n              });\n            }\n            return {\n              ...node,\n              style: {\n                ...node.style,\n                background: color\n              }\n            };\n          }\n          return node;\n        }));\n        setEdgesState(eds => eds.map(edge => {\n          if (edge.id === id) {\n            return {\n              ...edge,\n              animated: true,\n              style: {\n                ...edge.style,\n                stroke: color,\n                strokeWidth: 6\n              }\n            };\n          }\n          return edge;\n        }));\n      }, delay));\n      delay += 500;\n    });\n    animationTimeoutRef.current.push(setTimeout(() => {\n      setAnimationCompleted(true);\n    }, delay));\n  }, [order, setNodesState, setEdgesState, highlightCodeLines]);\n\n  // Use `useImperativeHandle` to expose `resetGraphColors` to parent component via `ref`\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n\n      // Reset nodes to original styles\n      setNodesState(nds => nds.map(node => {\n        var _originalNodeStylesRe;\n        const originalStyle = ((_originalNodeStylesRe = originalNodeStylesRef.current.find(n => n.id === node.id)) === null || _originalNodeStylesRe === void 0 ? void 0 : _originalNodeStylesRe.style) || {};\n        return {\n          ...node,\n          style: {\n            ...originalStyle,\n            background: '#D3D3D3'\n          }\n        };\n      }));\n\n      // Reset edges to original styles\n      setEdgesState(eds => eds.map(edge => {\n        var _originalEdgeStylesRe;\n        const originalStyle = ((_originalEdgeStylesRe = originalEdgeStylesRef.current.find(e => e.id === edge.id)) === null || _originalEdgeStylesRe === void 0 ? void 0 : _originalEdgeStylesRe.style) || {};\n        return {\n          ...edge,\n          style: {\n            ...originalStyle,\n            stroke: '#D3D3D3'\n          }\n        };\n      }));\n      setColoringStarted(false);\n      setAnimationCompleted(false);\n      highlightDataRef.current = [];\n      savedHighlightsRef.current = [];\n      if (editorRef.current && editorRef.current.editor && editorRef.current.editor.getSession()) {\n        const session = editorRef.current.editor.getSession();\n        markerIdsRef.current.forEach(markerId => session.removeMarker(markerId));\n        markerIdsRef.current = [];\n      }\n    }\n  }));\n  useEffect(() => {\n    if (nodes.length && edges.length && !coloringStarted) {\n      runColorAnimation();\n      setColoringStarted(true);\n    }\n  }, [nodes, edges, runColorAnimation, coloringStarted]);\n  useEffect(() => {\n    if (animationCompleted) {\n      savedHighlightsRef.current = [...highlightDataRef.current];\n    }\n  }, [animationCompleted]);\n\n  // Handle tab changes to remove or reapply highlights\n  useEffect(() => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current.forEach(markerId => session.removeMarker(markerId));\n      markerIdsRef.current = [];\n      if (activeTab === 'Original') {\n        if (savedHighlightsRef.current.length > 0) {\n          savedHighlightsRef.current.forEach(({\n            lineNumbers,\n            color\n          }) => {\n            highlightCodeLines(lineNumbers, color);\n          });\n        }\n      }\n    }\n  }, [activeTab, editorRef, highlightCodeLines]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-display\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 7\n  }, this);\n}, \"7TcaZz01bG6DPiQz0IqGcGiW0OA=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n})), \"7TcaZz01bG6DPiQz0IqGcGiW0OA=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c2 = GraphDisplay;\nexport default GraphDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphDisplay$forwardRef\");\n$RefreshReg$(_c2, \"GraphDisplay\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","useState","forwardRef","useImperativeHandle","ReactFlow","useNodesState","useEdgesState","useReactFlow","ace","jsxDEV","_jsxDEV","GraphDisplay","_s","_c","nodes","initialNodes","edges","initialEdges","order","editorRef","activeTab","ref","setNodesState","onNodesChange","setEdgesState","onEdgesChange","fitView","animationTimeoutRef","coloringStarted","setColoringStarted","markerIdsRef","colorClassesRef","Map","highlightDataRef","savedHighlightsRef","animationCompleted","setAnimationCompleted","originalNodeStylesRef","originalEdgeStylesRef","createColorClass","color","current","has","className","replace","style","document","createElement","innerHTML","head","appendChild","set","get","highlightCodeLines","lineNumbers","editor","session","getSession","Range","require","colorClass","forEach","line","markerId","addMarker","push","length","map","node","id","edge","runColorAnimation","clearTimeout","delay","setTimeout","nds","nodeLines","code_lines","background","eds","animated","stroke","strokeWidth","resetGraphColors","_originalNodeStylesRe","originalStyle","find","n","_originalEdgeStylesRe","e","removeMarker","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js"],"sourcesContent":["import React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport ace from 'ace-builds';\n\nconst GraphDisplay = forwardRef(\n  ({ nodes: initialNodes, edges: initialEdges, order, editorRef, activeTab }, ref) => {\n    const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n    const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n    const { fitView } = useReactFlow();\n    const animationTimeoutRef = useRef([]);\n    const [coloringStarted, setColoringStarted] = useState(false);\n    const markerIdsRef = useRef([]);\n    const colorClassesRef = useRef(new Map());\n    const highlightDataRef = useRef([]);\n    const savedHighlightsRef = useRef([]);\n    const [animationCompleted, setAnimationCompleted] = useState(false);\n\n    // Map to store original background and stroke styles\n    const originalNodeStylesRef = useRef([]);\n    const originalEdgeStylesRef = useRef([]);\n\n    const createColorClass = (color) => {\n      if (!colorClassesRef.current.has(color)) {\n        const className = `highlight-${color.replace('#', '')}`;\n        const style = document.createElement('style');\n        style.innerHTML = `\n          .${className} {\n            position: absolute;\n            background: ${color}40;\n            z-index: 20;\n          }\n        `;\n        document.head.appendChild(style);\n        colorClassesRef.current.set(color, className);\n      }\n      return colorClassesRef.current.get(color);\n    };\n\n    const highlightCodeLines = useCallback(\n      (lineNumbers, color) => {\n        if (editorRef.current && editorRef.current.editor) {\n          const session = editorRef.current.editor.getSession();\n          const Range = ace.require('ace/range').Range;\n\n          const colorClass = createColorClass(color);\n\n          lineNumbers.forEach((line) => {\n            const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n            markerIdsRef.current.push(markerId);\n          });\n        }\n      },\n      [editorRef]\n    );\n\n    useEffect(() => {\n      if (initialNodes.length && initialEdges.length) {\n        // Store the initial styles only once\n        if (!originalNodeStylesRef.current.length && !originalEdgeStylesRef.current.length) {\n          originalNodeStylesRef.current = initialNodes.map(node => ({\n            id: node.id,\n            style: node.style,\n          }));\n          originalEdgeStylesRef.current = initialEdges.map(edge => ({\n            id: edge.id,\n            style: edge.style,\n          }));\n        }\n        \n        setNodesState(initialNodes);\n        setEdgesState(initialEdges);\n        fitView();\n      }\n    }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n\n    const runColorAnimation = useCallback(() => {\n      if (!order || !order.length) return;\n\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      highlightDataRef.current = []; // Reset highlight data\n\n      let delay = 0;\n\n      order.forEach(([id, color]) => {\n        animationTimeoutRef.current.push(\n          setTimeout(() => {\n            setNodesState((nds) =>\n              nds.map((node) => {\n                if (node.id === id) {\n                  const nodeLines = node.code_lines || [];\n                  if (nodeLines.length > 0) {\n                    highlightCodeLines(nodeLines, color);\n                    highlightDataRef.current.push({ lineNumbers: nodeLines, color });\n                  }\n                  return {\n                    ...node,\n                    style: {\n                      ...node.style,\n                      background: color,\n                    },\n                  };\n                }\n                return node;\n              })\n            );\n\n            setEdgesState((eds) =>\n              eds.map((edge) => {\n                if (edge.id === id) {\n                  return {\n                    ...edge,\n                    animated: true,\n                    style: {\n                      ...edge.style,\n                      stroke: color,\n                      strokeWidth: 6,\n                    },\n                  };\n                }\n                return edge;\n              })\n            );\n          }, delay)\n        );\n\n        delay += 500;\n      });\n\n      animationTimeoutRef.current.push(\n        setTimeout(() => {\n          setAnimationCompleted(true);\n        }, delay)\n      );\n    }, [order, setNodesState, setEdgesState, highlightCodeLines]);\n\n    // Use `useImperativeHandle` to expose `resetGraphColors` to parent component via `ref`\n    useImperativeHandle(ref, () => ({\n      resetGraphColors() {\n        animationTimeoutRef.current.forEach(clearTimeout);\n        animationTimeoutRef.current = [];\n\n        // Reset nodes to original styles\n        setNodesState((nds) =>\n          nds.map((node) => {\n            const originalStyle = originalNodeStylesRef.current.find(n => n.id === node.id)?.style || {};\n            return {\n              ...node,\n              style: { ...originalStyle, background: '#D3D3D3' },\n            };\n          })\n        );\n\n        // Reset edges to original styles\n        setEdgesState((eds) =>\n          eds.map((edge) => {\n            const originalStyle = originalEdgeStylesRef.current.find(e => e.id === edge.id)?.style || {};\n            return {\n              ...edge,\n              style: { ...originalStyle, stroke: '#D3D3D3' },\n            };\n          })\n        );\n\n        setColoringStarted(false);\n        setAnimationCompleted(false);\n        highlightDataRef.current = [];\n        savedHighlightsRef.current = [];\n\n        if (editorRef.current && editorRef.current.editor && editorRef.current.editor.getSession()) {\n          const session = editorRef.current.editor.getSession();\n          markerIdsRef.current.forEach((markerId) => session.removeMarker(markerId));\n          markerIdsRef.current = [];\n        }\n      },\n    }));\n\n    useEffect(() => {\n      if (nodes.length && edges.length && !coloringStarted) {\n        runColorAnimation();\n        setColoringStarted(true);\n      }\n    }, [nodes, edges, runColorAnimation, coloringStarted]);\n\n    useEffect(() => {\n      if (animationCompleted) {\n        savedHighlightsRef.current = [...highlightDataRef.current];\n      }\n    }, [animationCompleted]);\n\n    // Handle tab changes to remove or reapply highlights\n    useEffect(() => {\n      if (editorRef.current && editorRef.current.editor) {\n        const session = editorRef.current.editor.getSession();\n        markerIdsRef.current.forEach((markerId) => session.removeMarker(markerId));\n        markerIdsRef.current = [];\n\n        if (activeTab === 'Original') {\n          if (savedHighlightsRef.current.length > 0) {\n            savedHighlightsRef.current.forEach(({ lineNumbers, color }) => {\n              highlightCodeLines(lineNumbers, color);\n            });\n          }\n        }\n      }\n    }, [activeTab, editorRef, highlightCodeLines]);\n\n    return (\n      <div className=\"graph-display\">\n        <ReactFlow\n          nodes={nodes}\n          edges={edges}\n          onNodesChange={onNodesChange}\n          onEdgesChange={onEdgesChange}\n          fitView\n        />\n      </div>\n    );\n  }\n);\n\nexport default GraphDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}