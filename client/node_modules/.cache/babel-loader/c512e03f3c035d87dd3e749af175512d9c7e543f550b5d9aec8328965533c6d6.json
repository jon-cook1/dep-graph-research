{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\nimport initialCode from './initialCode.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [buffers, setBuffers] = useState({\n    Original: initialCode.Original,\n    Decomposed: ''\n  });\n  const [activeTab, setActiveTab] = useState('Original');\n  const [noColor, setNoColor] = useState(false);\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [orde, setOrder] = useState([]);\n  const [codeProcessed, setCodeProcessed] = useState(false);\n  const editorRef = useRef(null);\n  const graphRef = useRef(null);\n  useEffect(() => {\n    const savedOriginal = localStorage.getItem('Original');\n    setBuffers(prevBuffers => ({\n      ...prevBuffers,\n      Original: savedOriginal || initialCode.Original,\n      Decomposed: ''\n    }));\n  }, []);\n  useEffect(() => {\n    localStorage.setItem('Original', buffers.Original);\n  }, [buffers.Original]);\n\n  // Updated handleProcessCode to call the backend\n  const handleProcessCode = async () => {\n    const code = buffers.Original;\n    try {\n      const response = await fetch('http://localhost:5001/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Original: code\n        })\n      });\n      if (!response.ok) {\n        const err = await response.json();\n        console.error('Error from backend:', err.error);\n        return;\n      }\n      const result = await response.json();\n      // Update state with the nodes and edges received from the backend\n      setNodes(result.nodes);\n      setEdges(result.edges);\n      // Optionally update the decomposed code if desired.\n      setBuffers(prevBuffers => ({\n        ...prevBuffers,\n        Decomposed: '' // You may choose to display additional information here\n      }));\n      setCodeProcessed(true);\n    } catch (error) {\n      console.error('Error processing code:', error);\n    }\n  };\n  const handleRerunAnimation = () => {\n    if (graphRef.current) {\n      graphRef.current.resetGraphColors();\n    }\n  };\n  const handleToggleNoColor = () => {\n    setNoColor(prevNoColor => !prevNoColor);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonPanel, {\n      onProcessCode: handleProcessCode,\n      onTabChange: setActiveTab,\n      activeTab: activeTab,\n      onRerunAnimation: handleRerunAnimation,\n      onToggleNoColor: handleToggleNoColor,\n      codeProcessed: codeProcessed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-section\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          code: buffers[activeTab],\n          setCode: newCode => setBuffers(prevBuffers => ({\n            ...prevBuffers,\n            [activeTab]: newCode\n          })),\n          editorRef: editorRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(GraphDisplay, {\n            ref: graphRef,\n            nodes: nodes,\n            edges: edges,\n            order: order,\n            editorRef: editorRef,\n            activeTab: activeTab,\n            noColor: noColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IIzFtIf72gSkLEiZ4zCqvlAd6fI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ButtonPanel","CodeEditor","GraphDisplay","ReactFlowProvider","initialNodes","initialEdges","order","initialCode","jsxDEV","_jsxDEV","App","_s","buffers","setBuffers","Original","Decomposed","activeTab","setActiveTab","noColor","setNoColor","nodes","setNodes","edges","setEdges","orde","setOrder","codeProcessed","setCodeProcessed","editorRef","graphRef","savedOriginal","localStorage","getItem","prevBuffers","setItem","handleProcessCode","code","response","fetch","method","headers","body","JSON","stringify","ok","err","json","console","error","result","handleRerunAnimation","current","resetGraphColors","handleToggleNoColor","prevNoColor","className","children","onProcessCode","onTabChange","onRerunAnimation","onToggleNoColor","fileName","_jsxFileName","lineNumber","columnNumber","setCode","newCode","ref","_c","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\nimport initialCode from './initialCode.json';\n\nfunction App() {\n  const [buffers, setBuffers] = useState({\n    Original: initialCode.Original,\n    Decomposed: '',\n  });\n  const [activeTab, setActiveTab] = useState('Original');\n  const [noColor, setNoColor] = useState(false);\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [orde, setOrder] = useState([]);\n  const [codeProcessed, setCodeProcessed] = useState(false);\n  const editorRef = useRef(null);\n  const graphRef = useRef(null);\n\n  useEffect(() => {\n    const savedOriginal = localStorage.getItem('Original');\n    setBuffers((prevBuffers) => ({\n      ...prevBuffers,\n      Original: savedOriginal || initialCode.Original,\n      Decomposed: '',\n    }));\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('Original', buffers.Original);\n  }, [buffers.Original]);\n\n  // Updated handleProcessCode to call the backend\n  const handleProcessCode = async () => {\n    const code = buffers.Original;\n    try {\n      const response = await fetch('http://localhost:5001/analyze', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ Original: code }),\n      });\n      \n      if (!response.ok) {\n        const err = await response.json();\n        console.error('Error from backend:', err.error);\n        return;\n      }\n      \n      const result = await response.json();\n      // Update state with the nodes and edges received from the backend\n      setNodes(result.nodes);\n      setEdges(result.edges);\n      // Optionally update the decomposed code if desired.\n      setBuffers((prevBuffers) => ({\n        ...prevBuffers,\n        Decomposed: '', // You may choose to display additional information here\n      }));\n      setCodeProcessed(true);\n    } catch (error) {\n      console.error('Error processing code:', error);\n    }\n  };\n\n  const handleRerunAnimation = () => {\n    if (graphRef.current) {\n      graphRef.current.resetGraphColors();\n    }\n  };\n\n  const handleToggleNoColor = () => {\n    setNoColor((prevNoColor) => !prevNoColor);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <ButtonPanel\n        onProcessCode={handleProcessCode}\n        onTabChange={setActiveTab}\n        activeTab={activeTab}\n        onRerunAnimation={handleRerunAnimation}\n        onToggleNoColor={handleToggleNoColor}\n        codeProcessed={codeProcessed}\n      />\n\n      <div className=\"content-container\">\n        <div className=\"editor-section\">\n          <CodeEditor\n            code={buffers[activeTab]}\n            setCode={(newCode) =>\n              setBuffers((prevBuffers) => ({\n                ...prevBuffers,\n                [activeTab]: newCode,\n              }))\n            }\n            editorRef={editorRef}\n          />\n        </div>\n\n        <div className=\"graph-section\">\n          <ReactFlowProvider>\n            <GraphDisplay\n              ref={graphRef}\n              nodes={nodes}\n              edges={edges}\n              order={order}\n              editorRef={editorRef}\n              activeTab={activeTab}\n              noColor={noColor}\n            />\n          </ReactFlowProvider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}