{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\nimport initialCode from './initialCode.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [buffers, setBuffers] = useState({\n    Original: initialCode.Original,\n    Decomposed: '' // Always start with an empty Decomposed code\n  });\n  const [activeTab, setActiveTab] = useState('Original');\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const editorRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Load saved Original code from localStorage on mount\n  useEffect(() => {\n    const savedOriginal = localStorage.getItem('Original');\n    setBuffers(prevBuffers => ({\n      ...prevBuffers,\n      Original: savedOriginal || initialCode.Original,\n      Decomposed: '' // Ensure Decomposed starts empty on load\n    }));\n  }, []);\n\n  // Save Original code to localStorage whenever it changes\n  useEffect(() => {\n    if (activeTab === 'Original') {\n      localStorage.setItem('Original', buffers.Original);\n    }\n  }, [buffers.Original, activeTab]);\n  const handleProcessCode = () => {\n    // Populate Decomposed code only when \"Process Code\" is clicked\n    const decomposedContent = initialCode.Decomposed;\n    setBuffers(prevBuffers => ({\n      ...prevBuffers,\n      Decomposed: decomposedContent\n    }));\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n  const handleRerunAnimation = () => {\n    if (graphRef.current) {\n      graphRef.current.resetGraphColors();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(ButtonPanel, {\n      onProcessCode: handleProcessCode,\n      onTabChange: setActiveTab,\n      activeTab: activeTab,\n      onRerunAnimation: handleRerunAnimation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-section\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          code: buffers[activeTab],\n          setCode: newCode => setBuffers(prevBuffers => ({\n            ...prevBuffers,\n            [activeTab]: newCode\n          })),\n          editorRef: editorRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-section\",\n        children: /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n          children: /*#__PURE__*/_jsxDEV(GraphDisplay, {\n            ref: graphRef,\n            nodes: nodes,\n            edges: edges,\n            order: order,\n            editorRef: editorRef,\n            activeTab: activeTab // Pass activeTab to GraphDisplay\n            ,\n            setNodes: setNodes,\n            setEdges: setEdges\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zUk7iQyVz2h/WP4zvleXwt4ossQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ButtonPanel","CodeEditor","GraphDisplay","ReactFlowProvider","initialNodes","initialEdges","order","initialCode","jsxDEV","_jsxDEV","App","_s","buffers","setBuffers","Original","Decomposed","activeTab","setActiveTab","nodes","setNodes","edges","setEdges","editorRef","graphRef","savedOriginal","localStorage","getItem","prevBuffers","setItem","handleProcessCode","decomposedContent","handleRerunAnimation","current","resetGraphColors","className","children","onProcessCode","onTabChange","onRerunAnimation","fileName","_jsxFileName","lineNumber","columnNumber","code","setCode","newCode","ref","_c","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport './App.css';\nimport ButtonPanel from './components/ButtonPanel';\nimport CodeEditor from './components/CodeEditor';\nimport GraphDisplay from './components/GraphDisplay';\nimport { ReactFlowProvider } from 'reactflow';\nimport { initialNodes, initialEdges, order } from './graphElements';\nimport initialCode from './initialCode.json';\n\nfunction App() {\n  const [buffers, setBuffers] = useState({\n    Original: initialCode.Original,\n    Decomposed: '', // Always start with an empty Decomposed code\n  });\n  const [activeTab, setActiveTab] = useState('Original');\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const editorRef = useRef(null);\n  const graphRef = useRef(null);\n\n  // Load saved Original code from localStorage on mount\n  useEffect(() => {\n    const savedOriginal = localStorage.getItem('Original');\n    setBuffers((prevBuffers) => ({\n      ...prevBuffers,\n      Original: savedOriginal || initialCode.Original,\n      Decomposed: '', // Ensure Decomposed starts empty on load\n    }));\n  }, []);\n\n  // Save Original code to localStorage whenever it changes\n  useEffect(() => {\n    if (activeTab === 'Original') {\n      localStorage.setItem('Original', buffers.Original);\n    }\n  }, [buffers.Original, activeTab]);\n\n  const handleProcessCode = () => {\n    // Populate Decomposed code only when \"Process Code\" is clicked\n    const decomposedContent = initialCode.Decomposed;\n    setBuffers((prevBuffers) => ({\n      ...prevBuffers,\n      Decomposed: decomposedContent,\n    }));\n    setNodes(initialNodes);\n    setEdges(initialEdges);\n  };\n\n  const handleRerunAnimation = () => {\n    if (graphRef.current) {\n      graphRef.current.resetGraphColors();\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Button Panel */}\n      <ButtonPanel\n        onProcessCode={handleProcessCode}\n        onTabChange={setActiveTab}\n        activeTab={activeTab}\n        onRerunAnimation={handleRerunAnimation}\n      />\n\n      <div className=\"content-container\">\n        <div className=\"editor-section\">\n          <CodeEditor\n            code={buffers[activeTab]}\n            setCode={(newCode) =>\n              setBuffers((prevBuffers) => ({\n                ...prevBuffers,\n                [activeTab]: newCode,\n              }))\n            }\n            editorRef={editorRef}\n          />\n        </div>\n\n        <div className=\"graph-section\">\n          <ReactFlowProvider>\n            <GraphDisplay\n              ref={graphRef}\n              nodes={nodes}\n              edges={edges}\n              order={order}\n              editorRef={editorRef}\n              activeTab={activeTab} // Pass activeTab to GraphDisplay\n              setNodes={setNodes}\n              setEdges={setEdges}\n            />\n          </ReactFlowProvider>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}