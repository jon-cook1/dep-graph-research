{"ast":null,"code":"var _jsxFileName = \"/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js\",\n  _s = $RefreshSig$();\n// GraphDisplay.js\n\nimport React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\nimport ace from 'ace-builds';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GraphDisplay = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  nodes: initialNodes,\n  edges: initialEdges,\n  order,\n  editorRef,\n  activeTab\n}, ref) => {\n  _s();\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const {\n    fitView\n  } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  const markerIdsRef = useRef({\n    Original: [],\n    Decomposed: []\n  }); // Track markers separately for each view\n  const colorClassesRef = useRef(new Map());\n  const [animationRun, setAnimationRun] = useState(false); // Track if animation has run\n\n  const createColorClass = color => {\n    if (!colorClassesRef.current.has(color)) {\n      const className = `highlight-${color.replace('#', '')}`;\n      const style = document.createElement('style');\n      style.innerHTML = `\n        .${className} {\n          position: absolute;\n          background: ${color}40;\n          z-index: 20;\n        }\n      `;\n      document.head.appendChild(style);\n      colorClassesRef.current.set(color, className);\n    }\n    return colorClassesRef.current.get(color);\n  };\n  const highlightCodeLines = useCallback((lineNumbers, color, view) => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      const Range = ace.require('ace/range').Range;\n      const colorClass = createColorClass(color);\n      const markers = lineNumbers.map(line => {\n        const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        return markerId;\n      });\n      markerIdsRef.current[view] = markers; // Save markers for the specific view\n    }\n  }, [editorRef]);\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n    setAnimationRun(true); // Set animation as run\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n    const view = activeTab; // Choose the active tab (Original or Decomposed)\n    let delay = 0;\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(setTimeout(() => {\n        setNodesState(nds => nds.map(node => {\n          if (node.id === id) {\n            const lineProperty = view === 'Original' ? 'code_lines' : 'decomp_code_lines';\n            highlightCodeLines(node[lineProperty] || [], color, view);\n            return {\n              ...node,\n              style: {\n                ...node.style,\n                background: color\n              }\n            };\n          }\n          return node;\n        }));\n        setEdgesState(eds => eds.map(edge => {\n          if (edge.id === id) {\n            return {\n              ...edge,\n              animated: true,\n              style: {\n                ...edge.style,\n                stroke: color,\n                strokeWidth: 6\n              }\n            };\n          }\n          return edge;\n        }));\n      }, delay));\n      delay += 500;\n    });\n  }, [order, setNodesState, setEdgesState, highlightCodeLines, activeTab]);\n  const clearMarkers = view => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current[view].forEach(markerId => session.removeMarker(markerId));\n      markerIdsRef.current[view] = []; // Clear the markers for the specific view\n    }\n  };\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n      setNodesState(nds => nds.map(node => ({\n        ...node,\n        style: {\n          ...node.style,\n          background: '#D3D3D3'\n        }\n      })));\n      setEdgesState(eds => eds.map(edge => ({\n        ...edge,\n        style: {\n          ...edge.style,\n          stroke: '#D3D3D3'\n        }\n      })));\n\n      // Clear markers for both views\n      clearMarkers('Original');\n      clearMarkers('Decomposed');\n      setAnimationRun(false); // Reset animation flag\n    }\n  }));\n\n  // Reapply markers when switching tabs, if animation has run\n  useEffect(() => {\n    if (!animationRun) return; // Only reapply if animation has run\n\n    const view = activeTab;\n    const otherView = activeTab === 'Original' ? 'Decomposed' : 'Original';\n\n    // Clear markers from the previous view and apply the markers for the current view\n    clearMarkers(otherView);\n    const markersToApply = markerIdsRef.current[view];\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markersToApply.forEach(markerId => session.addMarker(markerId));\n    }\n  }, [activeTab, animationRun]); // Depend on activeTab and animationRun\n\n  useEffect(() => {\n    if (nodes.length && edges.length && !animationRun) {\n      runColorAnimation();\n    }\n  }, [nodes, edges, runColorAnimation, animationRun]);\n  useEffect(() => {\n    if (initialNodes.length && initialEdges.length) {\n      const {\n        styledNodes,\n        styledEdges\n      } = applyStyles(initialNodes, initialEdges);\n      setNodesState(styledNodes);\n      setEdgesState(styledEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph-display\",\n    children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      fitView: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n}, \"2tIvUHaLuhlEI9ZrCBk3/q99+Cw=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n})), \"2tIvUHaLuhlEI9ZrCBk3/q99+Cw=\", false, function () {\n  return [useNodesState, useEdgesState, useReactFlow];\n});\n_c2 = GraphDisplay;\nexport default GraphDisplay;\nvar _c, _c2;\n$RefreshReg$(_c, \"GraphDisplay$forwardRef\");\n$RefreshReg$(_c2, \"GraphDisplay\");","map":{"version":3,"names":["React","useEffect","useCallback","useRef","useState","forwardRef","useImperativeHandle","ReactFlow","useNodesState","useEdgesState","useReactFlow","applyStyles","ace","jsxDEV","_jsxDEV","GraphDisplay","_s","_c","nodes","initialNodes","edges","initialEdges","order","editorRef","activeTab","ref","setNodesState","onNodesChange","setEdgesState","onEdgesChange","fitView","animationTimeoutRef","markerIdsRef","Original","Decomposed","colorClassesRef","Map","animationRun","setAnimationRun","createColorClass","color","current","has","className","replace","style","document","createElement","innerHTML","head","appendChild","set","get","highlightCodeLines","lineNumbers","view","editor","session","getSession","Range","require","colorClass","markers","map","line","markerId","addMarker","runColorAnimation","length","forEach","clearTimeout","delay","id","push","setTimeout","nds","node","lineProperty","background","eds","edge","animated","stroke","strokeWidth","clearMarkers","removeMarker","resetGraphColors","otherView","markersToApply","styledNodes","styledEdges","children","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["/Users/jonathancook/Desktop/Research/dep-graph/src/components/GraphDisplay.js"],"sourcesContent":["// GraphDisplay.js\n\nimport React, { useEffect, useCallback, useRef, useState, forwardRef, useImperativeHandle } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, useReactFlow } from 'reactflow';\nimport 'reactflow/dist/style.css';\nimport { applyStyles } from '../utils/GraphUtils';\nimport ace from 'ace-builds';\n\nconst GraphDisplay = forwardRef(({ nodes: initialNodes, edges: initialEdges, order, editorRef, activeTab }, ref) => {\n  const [nodes, setNodesState, onNodesChange] = useNodesState([]);\n  const [edges, setEdgesState, onEdgesChange] = useEdgesState([]);\n  const { fitView } = useReactFlow();\n  const animationTimeoutRef = useRef([]);\n  const markerIdsRef = useRef({ Original: [], Decomposed: [] }); // Track markers separately for each view\n  const colorClassesRef = useRef(new Map());\n  const [animationRun, setAnimationRun] = useState(false); // Track if animation has run\n\n  const createColorClass = (color) => {\n    if (!colorClassesRef.current.has(color)) {\n      const className = `highlight-${color.replace('#', '')}`;\n      const style = document.createElement('style');\n      style.innerHTML = `\n        .${className} {\n          position: absolute;\n          background: ${color}40;\n          z-index: 20;\n        }\n      `;\n      document.head.appendChild(style);\n      colorClassesRef.current.set(color, className);\n    }\n    return colorClassesRef.current.get(color);\n  };\n\n  const highlightCodeLines = useCallback((lineNumbers, color, view) => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      const Range = ace.require('ace/range').Range;\n\n      const colorClass = createColorClass(color);\n      const markers = lineNumbers.map((line) => {\n        const markerId = session.addMarker(new Range(line - 1, 0, line - 1, 1), colorClass, 'fullLine');\n        return markerId;\n      });\n\n      markerIdsRef.current[view] = markers; // Save markers for the specific view\n    }\n  }, [editorRef]);\n\n  const runColorAnimation = useCallback(() => {\n    if (!order || !order.length) return;\n\n    setAnimationRun(true); // Set animation as run\n    animationTimeoutRef.current.forEach(clearTimeout);\n    animationTimeoutRef.current = [];\n\n    const view = activeTab; // Choose the active tab (Original or Decomposed)\n    let delay = 0;\n\n    order.forEach(([id, color]) => {\n      animationTimeoutRef.current.push(\n        setTimeout(() => {\n          setNodesState((nds) =>\n            nds.map((node) => {\n              if (node.id === id) {\n                const lineProperty = view === 'Original' ? 'code_lines' : 'decomp_code_lines';\n                highlightCodeLines(node[lineProperty] || [], color, view);\n                return {\n                  ...node,\n                  style: {\n                    ...node.style,\n                    background: color,\n                  },\n                };\n              }\n              return node;\n            })\n          );\n\n          setEdgesState((eds) =>\n            eds.map((edge) => {\n              if (edge.id === id) {\n                return {\n                  ...edge,\n                  animated: true,\n                  style: {\n                    ...edge.style,\n                    stroke: color,\n                    strokeWidth: 6,\n                  },\n                };\n              }\n              return edge;\n            })\n          );\n        }, delay)\n      );\n\n      delay += 500;\n    });\n  }, [order, setNodesState, setEdgesState, highlightCodeLines, activeTab]);\n\n  const clearMarkers = (view) => {\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markerIdsRef.current[view].forEach((markerId)       => session.removeMarker(markerId)\n      );\n      markerIdsRef.current[view] = []; // Clear the markers for the specific view\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    resetGraphColors() {\n      animationTimeoutRef.current.forEach(clearTimeout);\n      animationTimeoutRef.current = [];\n\n      setNodesState((nds) =>\n        nds.map((node) => ({\n          ...node,\n          style: {\n            ...node.style,\n            background: '#D3D3D3',\n          },\n        }))\n      );\n\n      setEdgesState((eds) =>\n        eds.map((edge) => ({\n          ...edge,\n          style: {\n            ...edge.style,\n            stroke: '#D3D3D3',\n          },\n        }))\n      );\n\n      // Clear markers for both views\n      clearMarkers('Original');\n      clearMarkers('Decomposed');\n      setAnimationRun(false); // Reset animation flag\n    },\n  }));\n\n  // Reapply markers when switching tabs, if animation has run\n  useEffect(() => {\n    if (!animationRun) return; // Only reapply if animation has run\n\n    const view = activeTab;\n    const otherView = activeTab === 'Original' ? 'Decomposed' : 'Original';\n\n    // Clear markers from the previous view and apply the markers for the current view\n    clearMarkers(otherView);\n    const markersToApply = markerIdsRef.current[view];\n\n    if (editorRef.current && editorRef.current.editor) {\n      const session = editorRef.current.editor.getSession();\n      markersToApply.forEach((markerId) => session.addMarker(markerId));\n    }\n  }, [activeTab, animationRun]); // Depend on activeTab and animationRun\n\n  useEffect(() => {\n    if (nodes.length && edges.length && !animationRun) {\n      runColorAnimation();\n    }\n  }, [nodes, edges, runColorAnimation, animationRun]);\n\n  useEffect(() => {\n    if (initialNodes.length && initialEdges.length) {\n      const { styledNodes, styledEdges } = applyStyles(initialNodes, initialEdges);\n      setNodesState(styledNodes);\n      setEdgesState(styledEdges);\n      fitView();\n    }\n  }, [initialNodes, initialEdges, setNodesState, setEdgesState, fitView]);\n\n  return (\n    <div className=\"graph-display\">\n      <ReactFlow nodes={nodes} edges={edges} onNodesChange={onNodesChange} onEdgesChange={onEdgesChange} fitView />\n    </div>\n  );\n});\n\nexport default GraphDisplay;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}